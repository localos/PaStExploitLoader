#!/usr/bin/env perl -w


###
#
# Author: solacol
# Version: 0.1a_dev
#
# Description: Simple script for downloading exploits from packetstrom.com
#
# ToDo:
#	- Implement needed stuff ^^
#	- Check for wget
#	- Check perl modules
#	- Check if path/dir exists
#	- Store years and months in array or use some posix shit
#	- Check md5
#	- Check if file already exists (use checksum to compare)
#	- Use reasonable name for file storage
#
# Changelog:
#	- Very basic skeleton
#
###


use strict;
use warnings;
use POSIX qw{ strftime };
use LWP::Simple qw{ getstore };
use HTML::TokeParser::Simple;


# Url, dir, file related stuff 
my $baseUrl = 'https://packetstormsecurity.com/search/?q=Packet+Storm+New+Exploits+For';
my $storDir = '/tmp';
my $file2parse = '';

# Some additional config stuff
my $startYear = '2000';
my $startMonth = 'June';
my $skipYearly = 'yes';


# Construtor
my $parser = HTML::TokeParser::Simple->new($file2parse);

# Loop through html and extract hrefs
while(my $tag = $parser->get_tag('a')){
	next unless(defined(my $attr = $tag->get_attr('href')));












}






### Function for downloading a file
sub fct_getFileOnline{
    my $url = $_[0];
    my $file = $_[1];

    print("Download file $url ...\n");

    # Simple fallback to wget if getstore fails
    unless(getstore($url, $file) == 200){
        # Fallback if getstore() fails
        warn("WARNING: Problems!? Trying wget ...".__FILE__.':'.__LINE__." \n");
        return(1), warn("FAILURE: Could not get file $file! ".__FILE__.':'.__LINE__." $!\n") if(system("wget\ \-q\ $url\ \-O\ $file"));
    }

    return(0);
}

### Function to get online content without saving the file
sub fct_getFileContentOnly{
    my $url = $_[0];
    my $content = '';
    my @a_content = ();
    my @a_rray = ();

    # Get content of url and save it to var
    unless(defined($content = get($url))){
        # Fallback if get() fails
        warn("WARNING: Problems!? Trying wget ...".__FILE__.':'.__LINE__." \n");
        @a_content = `wget\ \-q\ \-O\ \-\ $url`;

        if(scalar(@a_content) > 1){
            return(\@a_content);
        }
        else{
            warn("FAILURE: Could not get content of $url! ".__FILE__.':'.__LINE__." $!\n");
            return(1);
        }
    }

    # Split downloaded content on newlines to array
    @a_content = split("\n",$content);

    return(\@a_content);
}

### Function to check if a directory is existent
sub fct_checkDir{
    my $dir = $_[0];

    # Check if directory is given
    return(1), warn("FAILURE: No directory given! ".__FILE__.':'.__LINE__." \n")  unless(defined($dir));

    # Check if directory exists
    if(-d "$dir" ){
        return(0); # found, existent
    }
    elsif(! -d "$dir"){
        return(2); # not found, not existent
    }
    else{
        warn("FAILURE: ".__FILE__.':'.__LINE__." $!\n");
        return(1);
    }
}

### Function to check if a file is existent
sub fct_checkFile{
    my $file = $_[0];

    # Check if file is given
    return(1), warn("FAILURE: No file given! ".__FILE__.':'.__LINE__." \n")  unless(defined($file));

    # Check if file exists
    if(-f "$file" ){
        return(0); # found, existent
    }
    elsif(! -f "$file"){
        return(2); # not found, not existent
    }
    else{
        warn("FAILURE: ".__FILE__.':'.__LINE__." $!\n");
        return(1);
    }
}
